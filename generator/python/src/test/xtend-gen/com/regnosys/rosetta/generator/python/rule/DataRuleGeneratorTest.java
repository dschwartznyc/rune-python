package com.regnosys.rosetta.generator.python.rule;

import com.google.inject.Inject;
import com.regnosys.rosetta.generator.python.PythonCodeGenerator;
import com.regnosys.rosetta.rosetta.RosettaModel;
import com.regnosys.rosetta.tests.RosettaInjectorProvider;
import com.regnosys.rosetta.tests.util.ModelHelper;
import java.util.Collections;
import java.util.HashMap;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(RosettaInjectorProvider.class)
@SuppressWarnings("all")
public class DataRuleGeneratorTest {
  @Inject
  @Extension
  private ModelHelper _modelHelper;

  @Inject
  private PythonCodeGenerator generator;

  @Test
  public void shouldGenerateConditionWithIfElseIf() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bar string (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baz string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if bar=\"Y\" then baz exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else if (bar=\"I\" or bar=\"N\") then baz is absent");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Foo(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("bar: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("baz: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return (not rosetta_attr_exists(rosetta_resolve_attr(self, \"baz\")))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"baz\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return if_cond_fn((all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"I\") or all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"N\")), _then_fn1, _else_fn1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"Y\"), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void shouldGenerateConditionWithNestedIfElseIf() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bar string (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("baz string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if bar exists then");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if bar=\"Y\" then baz exists");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("else if (bar=\"I\" or bar=\"N\") then baz is absent");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Foo(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("bar: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("baz: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn2():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return (not rosetta_attr_exists(rosetta_resolve_attr(self, \"baz\")))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn2():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"baz\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return if_cond_fn((all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"I\") or all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"N\")), _then_fn2, _else_fn2)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"bar\"), \"=\", \"Y\"), _then_fn1, _else_fn1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"bar\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void quoteExists() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Quote:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("quotePrice QuotePrice (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition Quote_Price:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if quotePrice exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then quotePrice -> bidPrice exists or quotePrice -> offerPrice exists");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type QuotePrice:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bidPrice number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("offerPrice number (0..1)");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Quote(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("quotePrice: Optional[com.rosetta.test.model.QuotePrice.QuotePrice] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_Quote_Price(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return (rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"bidPrice\")) or rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"offerPrice\")))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"quotePrice\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expectedQuote = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class QuotePrice(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("bidPrice: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("offerPrice: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    final String expectedQuotePrice = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedQuote));
    Assertions.assertTrue(python.toString().contains(expectedQuotePrice));
  }

  @Test
  public void nestedAnds() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Quote:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("quotePrice QuotePrice (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition Quote_Price:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if quotePrice exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then (");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("quotePrice -> price1 exists");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("and quotePrice -> price2 exists");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("and quotePrice -> price3 exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type QuotePrice:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("price1 number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("price2 number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("price3 number (0..1)");
    _builder.newLine();
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Quote(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("quotePrice: Optional[com.rosetta.test.model.QuotePrice.QuotePrice] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_Quote_Price(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return ((rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"price1\")) and rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"price2\"))) and rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"price3\")))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"quotePrice\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    _builder_1.newLine();
    final String expectedQuote = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class QuotePrice(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("price1: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("price2: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("price3: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    final String expectedQuotePrice = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedQuote));
    Assertions.assertTrue(python.toString().contains(expectedQuotePrice));
  }

  @Test
  public void numberAttributeisHandled() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Quote:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("quotePrice QuotePrice (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition Quote_Price:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if quotePrice exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then quotePrice -> bidPrice = 0.0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type QuotePrice:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bidPrice number (0..1)");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Quote(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("quotePrice: Optional[com.rosetta.test.model.QuotePrice.QuotePrice] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_Quote_Price(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(rosetta_resolve_attr(self, \"quotePrice\"), \"bidPrice\"), \"=\", 0.0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"quotePrice\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    _builder_1.newLine();
    final String expectedQuote = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class QuotePrice(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("bidPrice: Optional[Decimal] = Field(None, description=\"\")");
    _builder_2.newLine();
    final String expectedQuotePrice = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedQuote));
    Assertions.assertTrue(python.toString().contains(expectedQuotePrice));
  }

  @Test
  public void dataRuleWithDoIfAndFunction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("func Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("inputs:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("price number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("output:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("something number (1..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type Quote:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("price number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if price exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then Foo( price ) = 5.0");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Quote(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("price: Optional[Decimal] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(Foo(rosetta_resolve_attr(self, \"price\")), \"=\", 5.0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"price\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expectedQuote = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expectedQuote));
  }

  @Test
  public void dataRuleWithDoIfAndFunctionAndElse() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("func Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("inputs:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("price number (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("output:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("something number (1..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type Quote:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("price number (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if price exists");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then Foo( price ) = 5.0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else True");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Quote(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("price: Optional[Decimal] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(Foo(rosetta_resolve_attr(self, \"price\")), \"=\", 5.0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"price\")), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expectedQuoute = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expectedQuoute));
  }

  @Test
  public void dataRuleCoinHead() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Coin:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("head boolean (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tail boolean (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition CoinHeadRule:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if head = True");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then tail = False");
    _builder.newLine();
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Coin(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("head: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("tail: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_CoinHeadRule(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"tail\"), \"=\", False)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"head\"), \"=\", True), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void dataRuleCoinTail() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Coin:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("head boolean (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tail boolean (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition CoinTailRule:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if tail = True");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then head = False");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Coin(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("head: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("tail: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_CoinTailRule(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"head\"), \"=\", False)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"tail\"), \"=\", True), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void dataRuleCoinEdge() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Coin:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("head boolean (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tail boolean (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition EdgeRule:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if tail = False");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("then head = False");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Coin(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("head: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("tail: Optional[bool] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_EdgeRule(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"head\"), \"=\", False)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"tail\"), \"=\", False), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void conditionCount() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type CondTest:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("multiAttr number (0..*)");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("multiAttr count >= 0");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class CondTest(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("multiAttr: List[Decimal] = Field([], description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return all_elements(rosetta_count(rosetta_resolve_attr(self, \"multiAttr\")), \">=\", 0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void shouldCheckConditionWithInheritedAttribute() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("x string (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("y string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("x exists");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type Bar extends Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("z string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("y exists");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Foo(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("x: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("y: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"x\"))");
    _builder_1.newLine();
    final String expectedFoo = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class Bar(Foo):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("z: Optional[str] = Field(None, description=\"\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("@rosetta_condition");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("def condition_0_(self):");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("item = self");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"y\"))");
    _builder_2.newLine();
    final String expectedBar = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedFoo));
    Assertions.assertTrue(python.toString().contains(expectedBar));
  }

  @Test
  public void shouldCheckInheritedCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("x string (0..1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("y string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("x exists");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type Bar extends Foo:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("z string (0..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("y exists");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Foo(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("x: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("y: Optional[str] = Field(None, description=\"\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"x\"))");
    _builder_1.newLine();
    final String expectedFoo = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class Bar(Foo):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("z: Optional[str] = Field(None, description=\"\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("@rosetta_condition");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("def condition_0_(self):");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("item = self");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return rosetta_attr_exists(rosetta_resolve_attr(self, \"y\"))");
    _builder_2.newLine();
    final String expectedBar = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedFoo));
    Assertions.assertTrue(python.toString().contains(expectedBar));
  }

  public HashMap<String, CharSequence> generatePython(final CharSequence model) {
    HashMap<String, CharSequence> _xblockexpression = null;
    {
      final RosettaModel m = this._modelHelper.parseRosettaWithNoErrors(model);
      final ResourceSet resourceSet = m.eResource().getResourceSet();
      final String version = m.getVersion();
      final HashMap<String, CharSequence> result = CollectionLiterals.<String, CharSequence>newHashMap();
      result.putAll(this.generator.beforeAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      result.putAll(this.generator.beforeGenerate(m.eResource(), m, version));
      result.putAll(this.generator.generate(m.eResource(), m, version));
      result.putAll(this.generator.afterGenerate(m.eResource(), m, version));
      result.putAll(this.generator.afterAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
}
