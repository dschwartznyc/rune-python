package com.regnosys.rosetta.generator.python;

import com.google.inject.Inject;
import com.regnosys.rosetta.rosetta.RosettaModel;
import com.regnosys.rosetta.tests.RosettaInjectorProvider;
import com.regnosys.rosetta.tests.util.ModelHelper;
import java.util.Collections;
import java.util.HashMap;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(RosettaInjectorProvider.class)
@SuppressWarnings("all")
public class PythonMetaDataGenerationTest {
  @Inject
  @Extension
  private ModelHelper _modelHelper;

  @Inject
  private PythonCodeGenerator generator;

  @Test
  @Disabled("Test Meta Types")
  public void shouldGenerateMetaTypes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metaType reference string");
    _builder.newLine();
    _builder.append("metaType address string");
    _builder.newLine();
    _builder.append("metaType scheme string");
    _builder.newLine();
    _builder.append("metaType id string");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type TestType:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("[metadata key]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testTypeValue1 TestType2 (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata reference]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testTypeValue2 TestType3 (1..1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("enum TestEnum:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("TestEnumValue1");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("TestEnumValue2");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type TestType2:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testType2Value1 number (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata reference]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testType2Value2 string (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata id]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata scheme]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testType2Value3 TestEnum (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata scheme]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testTypeValue4 TestType4 (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata address]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type TestType3:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testType3Value1 TestType4 (1..1)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("[metadata location]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("type TestType4:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testType4Value1 number (1..1)");
    _builder.newLine();
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    final String types = IterableExtensions.join(python.values(), "\n").toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class ReferenceWithMetaTestType2:");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("value = TestType2()");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("globalReference = None");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("externalReference = None");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("address = Reference()");
    _builder_1.newLine();
    final String expected1 = _builder_1.toString();
    Assertions.assertTrue(types.contains(expected1));
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class ReferenceWithMetaTestType4:");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("value = TestType4()");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("globalReference = None");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("externalReference = None");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("address = Reference()");
    _builder_2.newLine();
    final String expected2 = _builder_2.toString();
    Assertions.assertTrue(types.contains(expected2));
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("class BasicReferenceWithMetaDecimal:");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("value = None");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("globalReference = None");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("externalReference = None");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("address = Reference()");
    _builder_3.newLine();
    final String expected3 = _builder_3.toString();
    Assertions.assertTrue(types.contains(expected3));
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("class FieldWithMetaStr:");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("value = None");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("meta = MetaFields()");
    _builder_4.newLine();
    final String expected4 = _builder_4.toString();
    Assertions.assertTrue(types.contains(expected4));
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("class FieldWithMetaTestEnum:");
    _builder_5.newLine();
    _builder_5.append("    ");
    _builder_5.append("value = TestEnum");
    _builder_5.newLine();
    _builder_5.append("    ");
    _builder_5.append("meta = MetaFields()");
    _builder_5.newLine();
    final String expected5 = _builder_5.toString();
    Assertions.assertTrue(types.contains(expected5));
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("class MetaFields:");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("scheme = None");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("globalKey = None");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("externalKey = None");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("location = []");
    _builder_6.newLine();
    final String expected6 = _builder_6.toString();
    Assertions.assertTrue(types.contains(expected6));
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("class MetaAndTemplateFields:");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("scheme = None");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("globalKey = None");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("externalKey = None");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("templateGlobalReference = None");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("location = []");
    _builder_7.newLine();
    final String expected7 = _builder_7.toString();
    Assertions.assertTrue(types.contains(expected7));
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("class Key:");
    _builder_8.newLine();
    _builder_8.append("    ");
    _builder_8.append("scope = None");
    _builder_8.newLine();
    _builder_8.append("    ");
    _builder_8.append("value = None");
    _builder_8.newLine();
    final String expected8 = _builder_8.toString();
    Assertions.assertTrue(types.contains(expected8));
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append("class Reference:");
    _builder_9.newLine();
    _builder_9.append("    ");
    _builder_9.append("scope = None");
    _builder_9.newLine();
    _builder_9.append("    ");
    _builder_9.append("value = None");
    _builder_9.newLine();
    final String expected9 = _builder_9.toString();
    Assertions.assertTrue(types.contains(expected9));
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("class TestType:");
    _builder_10.newLine();
    _builder_10.append("    ");
    _builder_10.append("meta = MetaFields()");
    _builder_10.newLine();
    _builder_10.append("    ");
    _builder_10.append("testTypeValue1 = ReferenceWithMetaTestType2()");
    _builder_10.newLine();
    _builder_10.append("    ");
    _builder_10.append("testTypeValue2 = TestType3()");
    _builder_10.newLine();
    final String expected10 = _builder_10.toString();
    Assertions.assertTrue(types.contains(expected10));
  }

  @Disabled
  @Test
  public void func() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("func Create_RejectedWorkflowStep: ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("[creation WorkflowStep]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("inputs:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("messageInformation MessageInformation (0..1) <\"Contains all information pertaining the messaging header\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("timestamp EventTimestamp (1..*) <\"The dateTime and qualifier associated with this event.\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eventIdentifier Identifier (1..*) <\"The identifiers that uniquely identify this lifecycle event.\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("proposedWorkflowStep WorkflowStep (1..1) <\"Required previous WorkflowStep that provides lineage to WorkflowStep that precedes it.\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("output:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("rejectedWorkflowStep WorkflowStep (1..1) <\"Rejected WorkflowStep with lineage to the proposed step that preceded it.\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("condition ProposedEventExists: <\"The previous proposed step being rejected must exist\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("proposedWorkflowStep -> proposedEvent exists");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("set rejectedWorkflowStep -> messageInformation: <\"Assign the workflowStep action.\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("messageInformation");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("add rejectedWorkflowStep -> timestamp: <\"Assign the dateTime and qualifier associated with this event.\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("timestamp");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("add rejectedWorkflowStep -> eventIdentifier: <\"Assign the identifiers that uniquely identify this lifecycle event.\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eventIdentifier");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("set rejectedWorkflowStep -> previousWorkflowStep: <\"Set the reference to the previous WorkflowStep to provide lineage\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("proposedWorkflowStep as-key");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("set rejectedWorkflowStep -> rejected: <\"Set the rejected flag to True\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("True");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
  }

  public HashMap<String, CharSequence> generatePython(final CharSequence model) {
    HashMap<String, CharSequence> _xblockexpression = null;
    {
      final RosettaModel m = this._modelHelper.parseRosettaWithNoErrors(model);
      final ResourceSet resourceSet = m.eResource().getResourceSet();
      final String version = m.getVersion();
      final HashMap<String, CharSequence> result = CollectionLiterals.<String, CharSequence>newHashMap();
      result.putAll(this.generator.beforeAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      result.putAll(this.generator.beforeGenerate(m.eResource(), m, version));
      result.putAll(this.generator.generate(m.eResource(), m, version));
      result.putAll(this.generator.afterGenerate(m.eResource(), m, version));
      result.putAll(this.generator.afterAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
}
