package com.regnosys.rosetta.generator.python.expression;

import com.google.inject.Inject;
import com.regnosys.rosetta.generator.python.PythonCodeGenerator;
import com.regnosys.rosetta.rosetta.RosettaModel;
import com.regnosys.rosetta.tests.RosettaInjectorProvider;
import com.regnosys.rosetta.tests.util.ModelHelper;
import java.util.Collections;
import java.util.HashMap;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Ignore;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(RosettaInjectorProvider.class)
@SuppressWarnings("all")
public class PythonExpressionGeneratorTest {
  @Inject
  @Extension
  private ModelHelper _modelHelper;

  @Inject
  private PythonCodeGenerator generator;

  @Test
  public void testGenerateSwitch() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("type FooTest:");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("a int (1..1)");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("condition Test:");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("a switch");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("1 then True,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("2 then True,");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("default False");
      final HashMap<String, CharSequence> python = this.generatePython(_builder);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception ex = (Exception)_t;
        Assertions.assertTrue(ex.getMessage().contains("Unsupported expression type of SwitchOperationImpl"));
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }

  @Test
  public void testGenerateChoiceCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1:<\"Test choice condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 string (0..1) <\"Test string field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 string (0..1) <\"Test string field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field3 string (0..1) <\"Test string field 3\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestChoice: optional choice field1, field2, field3");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test choice condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[str] = Field(None, description=\"Test string field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: Optional[str] = Field(None, description=\"Test string field 2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field3: Optional[str] = Field(None, description=\"Test string field 3\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 3");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestChoice(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return self.check_one_of_constraint(\'field1\', \'field2\', \'field3\', necessity=False)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateOneOfCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1:<\"Test one-of condition.\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1 string (0..1) <\"Test string field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition OneOf: one-of");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_CHOICE_ALIAS_MAP ={\"field1\":[]}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test one-of condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[str] = Field(None, description=\"Test string field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_OneOf(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return self.check_one_of_constraint(\'field1\', necessity=True)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateIfThenCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test if-then condition.\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1 string (0..1) <\"Test string field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 number (0..1) <\"Test number field 2\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if field1 exists");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("then field2=0");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test if-then condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[str] = Field(None, description=\"Test string field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: Optional[Decimal] = Field(None, description=\"Test number field 2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateIfThenElseCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test if-then-else condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 string (0..1) <\"Test string field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 number (0..1) <\"Test number field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if field1 exists");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("then field2=0");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else field2=1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test if-then-else condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[str] = Field(None, description=\"Test string field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: Optional[Decimal] = Field(None, description=\"Test number field 2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(self, \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateBooleanCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test boolean condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 boolean (1..1) <\"Test booelan field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 number (0..1) <\"Test number field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if field1= True");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("then field2=0");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else field2=5");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test boolean condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: bool = Field(..., description=\"Test booelan field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test booelan field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: Optional[Decimal] = Field(None, description=\"Test number field 2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 5)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field1\"), \"=\", True), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateAbsentCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test absent condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 boolean (1..1) <\"Test booelan field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 number (0..1) <\"Test number field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if field1= True");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("then field2=0");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else field2 is absent");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test absent condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: bool = Field(..., description=\"Test booelan field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test booelan field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: Optional[Decimal] = Field(None, description=\"Test number field 2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return (not rosetta_attr_exists(rosetta_resolve_attr(self, \"field2\")))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field1\"), \"=\", True), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateOnlyElementCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum TestEnum: <\"Enum to test\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("TestEnumValue1 <\"Test enum value 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("TestEnumValue2 <\"Test enum value 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test1: <\"Test only-element condition.\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1 TestEnum (0..1) <\"Test enum field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 number (0..1) <\"Test number field 2\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if field1 only-element= TestEnum->TestEnumValue1 ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("then field2=0");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class TestEnum(Enum):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Enum to test");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("TEST_ENUM_VALUE_1 = \"TestEnumValue1\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test enum value 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("TEST_ENUM_VALUE_2 = \"TestEnumValue2\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test enum value 2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    final String expectedEnum = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class Test1(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test only-element condition.");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: Optional[com.rosetta.test.model.TestEnum.TestEnum] = Field(None, description=\"Test enum field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test enum field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: Optional[Decimal] = Field(None, description=\"Test number field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test number field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("@rosetta_condition");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("def condition_0_TestCond(self):");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("Test condition");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("item = self");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("def _then_fn0():");
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("return all_elements(rosetta_resolve_attr(self, \"field2\"), \"=\", 0)");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("def _else_fn0():");
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("return True");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return if_cond_fn(all_elements(get_only_element(rosetta_resolve_attr(self, \"field1\")), \"=\", rosetta_resolve_attr(TestEnum, \"TEST_ENUM_VALUE_1\")), _then_fn0, _else_fn0)");
    final String expectedTest = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expectedEnum));
    Assertions.assertTrue(python.toString().contains(expectedTest));
  }

  @Test
  public void testGenerateNumberLiteralCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test rosetta number literal  condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 number (0..1) <\"Test number field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test rosetta number literal  condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[Decimal] = Field(None, description=\"Test number field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return rosetta_resolve_attr(self, \"field1\")");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateintLiteralCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test rosetta int literal  condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 int (0..1) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test rosetta int literal  condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[int] = Field(None, description=\"Test int field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test int field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return rosetta_resolve_attr(self, \"field1\")");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateStringLiteralCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test1: <\"Test rosetta string literal  condition.\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 string (0..1) <\"Test string field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test1(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test rosetta string literal  condition.");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: Optional[str] = Field(None, description=\"Test string field 1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field 1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return rosetta_resolve_attr(self, \"field1\")");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateOnlyExistsCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 number (0..1) <\"Test number field 1\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test only exists condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("aValue A (1..1) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if aValue -> field1 exists ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("then aValue -> field1 only exists");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test only exists condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return self.check_one_of_constraint(self, rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: Optional[Decimal] = Field(None, description=\"Test number field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test number field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedA));
  }

  @Test
  public void testGenerateCountCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 int (0..*) <\"Test int field 2\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test count operation condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("aValue A (1..*) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if aValue -> field1 count <> aValue -> field2 count ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("then True");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else False");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test count operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: List[com.rosetta.test.model.A.A] = Field([], description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def cardinality_aValue(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return check_cardinality(self.aValue, 1, None)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return False");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(any_elements(rosetta_count(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")), \"<>\", rosetta_count(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field2\"))), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: List[int] = Field([], description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: List[int] = Field([], description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedA));
  }

  @Test
  public void testGenerateAnyCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test: <\"Test any operation condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field1 string (1..1) <\"Test string field1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 string (1..1) <\"Test boolean field2\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if field1=\"A\" ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("then [\"B\", \"C\", \"D\"] any = field2");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test any operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: str = Field(..., description=\"Test string field1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: str = Field(..., description=\"Test boolean field2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test boolean field2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements([\"B\", \"C\", \"D\"], \"=\", rosetta_resolve_attr(self, \"field2\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field1\"), \"=\", \"A\"), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateDistinctCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field2 int (0..*) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("                    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test distinct operation condition\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("aValue A (1..*) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field3 number (1..1)<\"Test number field 3\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if aValue -> field1 distinct count = 1");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("then field3=0");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("else field3=1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test distinct operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: List[com.rosetta.test.model.A.A] = Field([], description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def cardinality_aValue(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return check_cardinality(self.aValue, 1, None)");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field3: Decimal = Field(..., description=\"Test number field 3\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test number field 3");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", 0)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", 1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_count(set(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\"))), \"=\", 1), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: List[int] = Field([], description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: List[int] = Field([], description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Test
  public void testGenerateSortCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 int (0..1) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 int (0..1) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test sort operation condition\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("aValue A (1..1) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if aValue->field1 exists ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("then sort [ aValue->field1]");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test sort operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return sorted(item)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: Optional[int] = Field(None, description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: Optional[int] = Field(None, description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Test
  public void testGenerateLastCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 int (0..1) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test last operation condition\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("aValue A (1..1) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if aValue->field1 exists ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("then aValue->field1 last");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test last operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")[-1]");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: List[int] = Field([], description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: Optional[int] = Field(None, description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Test
  public void testGenerateSumCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field2 int (0..1) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("type Test: <\"Test sum operation condition\">");
    _builder.newLine();
    _builder.append("aValue A (1..1) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if aValue->field1 exists ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("then aValue->field1 sum");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test sum operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return sum(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(rosetta_attr_exists(rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")), _then_fn0, _else_fn0)");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: List[int] = Field([], description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: Optional[int] = Field(None, description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Test
  public void testGenerateFilterCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("field1 boolean (1..1) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("field2 int (0..*) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type Test: <\"Test filter operation condition\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("aValue A (1..1) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("filter aValue->field1");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("then aValue->field2 first");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test filter operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return (lambda item: rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field2\")[0])(rosetta_filter(item, lambda item: rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")))");
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: bool = Field(..., description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: List[int] = Field([], description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Ignore
  public void testGenerateFlattenCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type C: <\"Test type C\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field4 int (1..1) <\"Test int field 4\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field5 int (0..*) <\"Test int field 5\">");
    _builder.newLine();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cValue C (0..*) <\"Test C type cValue\">");
    _builder.newLine();
    _builder.append("type B: <\"Test type B\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field2 int (0..*) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aValue A (0..*) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type Test: <\"Test filter operation condition\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("bValue B (0..*) <\"Test B type bValue\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field6 boolean (0..1) <\"Test boolean type field6\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if bValue->field2 exists");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("then bValue flatten");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test filter operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aValue: com.rosetta.test.model.A.A = Field(..., description=\"Test A type aValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test A type aValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return (lambda item: rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field2\")[0])(rosetta_filter(item, lambda item: rosetta_resolve_attr(rosetta_resolve_attr(self, \"aValue\"), \"field1\")))");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: bool = Field(..., description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field2: List[int] = Field([], description=\"Test int field 2\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 2");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    final String expectedClassA = _builder_2.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
  }

  @Test
  public void testGenerateBinContainsCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum C: <\"Test type C\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field4 <\"Test enum field 4\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field5 <\"Test enum field 5\">");
    _builder.newLine();
    _builder.append("type A: <\"Test type\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field1 int (0..*) <\"Test int field 1\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cValue C (0..*) <\"Test C type cValue\">");
    _builder.newLine();
    _builder.append("type B: <\"Test type B\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("field2 int (0..*) <\"Test int field 2\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aValue A (0..*) <\"Test A type aValue\">");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type Test: <\"Test filter operation condition\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("bValue B (0..*) <\"Test B type bValue\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field3 boolean (0..1) <\"Test bool type field3\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if field3=True");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("then bValue->aValue->cValue contains C->field4");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test filter operation condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("bValue: List[com.rosetta.test.model.B.B] = Field([], description=\"Test B type bValue\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test B type bValue");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field3: Optional[bool] = Field(None, description=\"Test bool type field3\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test bool type field3");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return contains(rosetta_resolve_attr(rosetta_resolve_attr(rosetta_resolve_attr(self, \"bValue\"), \"aValue\"), \"cValue\"), rosetta_resolve_attr(C, \"FIELD_4\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", True), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("class A(BaseDataClass):");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test type");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("field1: List[int] = Field([], description=\"Test int field 1\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test int field 1");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("cValue: List[com.rosetta.test.model.C.C] = Field([], description=\"Test C type cValue\")");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("Test C type cValue");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("\"\"\"");
    _builder_2.newLine();
    final String expectedClassA = _builder_2.toString();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("class B(BaseDataClass):");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("Test type B");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("field2: List[int] = Field([], description=\"Test int field 2\")");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("Test int field 2");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("aValue: List[com.rosetta.test.model.A.A] = Field([], description=\"Test A type aValue\")");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("Test A type aValue");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("\"\"\"");
    _builder_3.newLine();
    final String expectedClassB = _builder_3.toString();
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("class C(Enum):");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("Test type C");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("FIELD_4 = \"field4\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("Test enum field 4");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("FIELD_5 = \"field5\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("Test enum field 5");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("\"\"\"");
    _builder_4.newLine();
    final String expectedClassC = _builder_4.toString();
    Assertions.assertTrue(python.toString().contains(expected));
    Assertions.assertTrue(python.toString().contains(expectedClassA));
    Assertions.assertTrue(python.toString().contains(expectedClassB));
    Assertions.assertTrue(python.toString().contains(expectedClassC));
  }

  @Test
  public void testGenerateBinDisjointCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test: <\"Test disjoint binary expression condition\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field1 string (1..1) <\"Test string field1\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field2 string (1..1) <\"Test string field2\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field3 boolean (1..1) <\"Test boolean field3\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if field3=False ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("then if [\"B\", \"C\", \"D\"] any = field2 and [\"A\"] disjoint field1 ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("then field3=True");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test disjoint binary expression condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: str = Field(..., description=\"Test string field1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: str = Field(..., description=\"Test string field2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field3: bool = Field(..., description=\"Test boolean field3\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test boolean field3");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", True)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return if_cond_fn((all_elements([\"B\", \"C\", \"D\"], \"=\", rosetta_resolve_attr(self, \"field2\")) and disjoint([\"A\"], rosetta_resolve_attr(self, \"field1\"))), _then_fn1, _else_fn1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", False), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  @Test
  public void testGenerateBinJoinCondition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type Test: <\"Test join binary expression condition\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field1 string (1..1) <\"Test string field1\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field2 string (1..1) <\"Test string field2\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field3 boolean (1..1) <\"Test boolean field3\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("condition TestCond: <\"Test condition\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if field3=False ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("then if [\"B\", \"C\", \"D\"] any = field2 then join field1");
    _builder.newLine();
    final HashMap<String, CharSequence> python = this.generatePython(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("class Test(BaseDataClass):");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test join binary expression condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field1: str = Field(..., description=\"Test string field1\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field1");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field2: str = Field(..., description=\"Test string field2\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test string field2");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("field3: bool = Field(..., description=\"Test boolean field3\")");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("Test boolean field3");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@rosetta_condition");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("def condition_0_TestCond(self):");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Test condition");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\"\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("item = self");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return join(item, rosetta_resolve_attr(self, \"field1\"))");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn1():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _then_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return if_cond_fn(all_elements([\"B\", \"C\", \"D\"], \"=\", rosetta_resolve_attr(self, \"field2\")), _then_fn1, _else_fn1)");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("def _else_fn0():");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return True");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return if_cond_fn(all_elements(rosetta_resolve_attr(self, \"field3\"), \"=\", False), _then_fn0, _else_fn0)");
    _builder_1.newLine();
    final String expected = _builder_1.toString();
    Assertions.assertTrue(python.toString().contains(expected));
  }

  public HashMap<String, CharSequence> generatePython(final CharSequence model) {
    HashMap<String, CharSequence> _xblockexpression = null;
    {
      final RosettaModel m = this._modelHelper.parseRosettaWithNoErrors(model);
      final ResourceSet resourceSet = m.eResource().getResourceSet();
      final String version = m.getVersion();
      final HashMap<String, CharSequence> result = CollectionLiterals.<String, CharSequence>newHashMap();
      result.putAll(this.generator.beforeAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      result.putAll(this.generator.beforeGenerate(m.eResource(), m, version));
      result.putAll(this.generator.generate(m.eResource(), m, version));
      result.putAll(this.generator.afterGenerate(m.eResource(), m, version));
      result.putAll(this.generator.afterAllGenerate(resourceSet, Collections.<RosettaModel>unmodifiableSet(CollectionLiterals.<RosettaModel>newHashSet(m)), version));
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
}
